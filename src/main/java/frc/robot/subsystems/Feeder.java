// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

/**
 *
 */
public class Feeder extends SubsystemBase {
    private WPI_TalonFX m_beltMotor;
    private WPI_TalonFX m_triggerMotor;
    private Alliance m_teamColor;
    private boolean m_isLaunching;
    private boolean m_isEating;

    // Feeder subsystem
    public Feeder(Alliance teamColor) {
        m_beltMotor = new WPI_TalonFX(6);

        m_beltMotor.clearStickyFaults();
        m_beltMotor.configFactoryDefault();
        m_beltMotor.setInverted(false);
        // ADD m_triggerMotor stuff here soon
        m_teamColor = teamColor;

        m_isLaunching = true;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Feeder Current Percentage", m_beltMotor.getMotorOutputPercent());

        boolean triggerMotorOn = true;
        boolean beltMotorOn = true;

        //if not Firing
        if(!m_isLaunching){
            //smart belt 
            if(launchSensor ball is present){   // colorSensor sees ball
                triggerMotorOn = false;
                if(feedSensor ball is present){ // proxSensor sees ball
                    beltMotorOn = false;
                }
            }
        } else if(launchSensor ball is present) { // colorSensor sees ball
            
            if(ball color is blue){ // colorSensor sees  blue color
                get distance from limelight
                set launch rpm 
            } 
            else { // colorSensor sees red color / no ball
                set dump rpm
            }

            if(launcher not ready){
                triggerMotorOn = false;
                if(feedSensor ball is present) { // proxSensor
                    beltMotorOn = false;
                }
            }
        }

        enableTriggerMotor(triggerMotorOn); // launching true
        enableBeltMotor(beltMotorOn);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
    }

    // Turns the feeder on to 25%
    public void beltOn() {
        m_beltMotor.set(ControlMode.PercentOutput, 0.25d);
    }

    // Turns the feeder off
    public void beltOff() {
        m_beltMotor.set(ControlMode.PercentOutput, 0);
    }

    // Turns Trigger On
    public void triggerOn() {
        m_triggerMotor.set(ControlMode.PercentOutput, 0.30d);
    }

    // Turns Trigger Off
    public void triggerOff() {
        m_triggerMotor.set(ControlMode.PercentOutput, 0);
    }

    // Turns belt on/off based on a boolean parameter
    public void enableBeltMotor(boolean toggleOn) {
        if (toggleOn) {
            beltOn();
        } else {
            beltOff();
        }
    }

    // Turns trigger on/off based on a boolean parameter
    public void enableTriggerMotor(boolean toggleOn) {
        if (toggleOn) {
            triggerOn();
        } else {
            triggerOff();
        }
    }

    public void setIsLaunching(boolean isLaunching) {
        m_isLaunching = isLaunching;
    }

}
