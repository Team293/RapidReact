// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Compressor;
import static frc.robot.Constants.PneumaticConstants.*;
import static frc.robot.Constants.ClimberConstants.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */

public class Climb extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid leftClimbSolenoid;
    private DoubleSolenoid rightClimbSolenoid;
    private Compressor compressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Climb() {
        
        compressor = new Compressor(PNEUMATIC_MODULE_ID, PNUEMATIC_MODULE_TYPE);

        compressor.enableAnalog(LOWEST_COMPRESSOR_PSI, HIGHEST_COMPRESSOR_PSI);
   
        rightClimbSolenoid = new DoubleSolenoid(PNEUMATIC_MODULE_ID,PNUEMATIC_MODULE_TYPE,LOW_PRESSURE_RETRACTION_SOLENOID , HIGH_PRESSURE_RETRACTION_SOLENOID );  // 1 0
        leftClimbSolenoid = new DoubleSolenoid(PNEUMATIC_MODULE_ID,PNUEMATIC_MODULE_TYPE,LOW_PRESSURE_EXTENSION_SOLENOID , HIGH_PRESSURE_EXTENSION_SOLENOID); // 3 2

        addChild("lowPressureClimbSolenoid",rightClimbSolenoid);  
        addChild("highPressureClimbSolenoid",leftClimbSolenoid);
    }

    @Override
    public void periodic() 
    {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() 
    {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void climberDown() 
    {
        rightClimbSolenoid.set(Value.kReverse);
        leftClimbSolenoid.set(Value.kReverse);
    }

    public void climberUp() 
    {
        rightClimbSolenoid.set(Value.kForward);
        leftClimbSolenoid.set(Value.kForward);

    }
    
}
