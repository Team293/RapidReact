// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import static frc.robot.Constants.LauncherConstants.*;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Launcher extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX flyWheelMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Launcher() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        flyWheelMotor = new WPI_TalonFX(6);

        flyWheelMotor.clearStickyFaults();
        flyWheelMotor.configFactoryDefault();
        flyWheelMotor.configSelectedFeedbackSensor(FeedbackDevice.IntegratedSensor);
        flyWheelMotor.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        flyWheelMotor.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        flyWheelMotor.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        flyWheelMotor.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        flyWheelMotor.setInverted(false);
        flyWheelMotor.configClosedloopRamp(CLOSED_LOOP_RAMPRATE);
        flyWheelMotor.enableVoltageCompensation(true);
        flyWheelMotor.configVoltageCompSaturation(VOLTAGE_SATURATION);

        SmartDashboard.putNumber("Launcher Target RPM", 0);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Launcher Current RPM", getRpm());
        setRpm(SmartDashboard.getNumber("Launcher Target RPM", 0));  
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Converts RPMs to encoder units per deciseconds (100ms)
    private double convertRpmToVelocity(double rpm) {
        return (rpm * GEAR_RATIO * ENCODER_UNITS_PER_REVOLUTION) / MINUTES_TO_DECISECONDS;
    }

    // Converts Encoder units per deciseconds (100ms) to RPMs
    private double convertVelocityToRpm(double velocity) {
        return (velocity * MINUTES_TO_DECISECONDS) / (ENCODER_UNITS_PER_REVOLUTION * GEAR_RATIO);
    }

    // Sets the RPM of the flywheel motor
    public void setRpm(double rpm) {
        SmartDashboard.putNumber("Launcher Target RPM", rpm);
        flyWheelMotor.set(ControlMode.Velocity, convertRpmToVelocity(rpm));
    }

    // Gets the RPM of the flywheel motor
    public double getRpm() {
        return convertVelocityToRpm(flyWheelMotor.getSelectedSensorVelocity());
    }

    public void stop() {
        flyWheelMotor.set(ControlMode.Current, 0);
    }
}
