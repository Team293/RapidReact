// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import java.util.ArrayList;
import java.util.List;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.classes.Kinematics;
import frc.robot.classes.Position2D;
import frc.robot.classes.SPIKE293Utils;
import frc.robot.classes.SmoothControl;
import frc.robot.classes.TargetPosition2D;
import static frc.robot.Constants.AutonomousCommandConstants.*;
import static frc.robot.Constants.DrivetrainConstants.*;
import frc.robot.subsystems.Drivetrain;

/**
 *
 */
public class AutonomousCommand extends CommandBase {

    public enum AutoStartPositions
    {
        LEFT,
        MIDDLE,
        RIGHT
    }
    private enum AutoStates
    {
        DRIVE_TO_TARGET,
        END
    }

    private boolean m_isDone = false;
    private Kinematics m_kinematics;
    private SmoothControl m_smoothControl;
    private Drivetrain m_drivetrain;

    private List<TargetPosition2D> m_targetPath = new ArrayList<TargetPosition2D>();
    private TargetPosition2D m_targetPose;
    private int m_targetPathIndex;
    private AutoStartPositions m_startPosition;
    private AutoStates m_state;
    private Timer m_timer;

    private List<AutoStates> m_stateList = new ArrayList<AutoStates>();
    int m_stateIndex;

    public AutonomousCommand(Drivetrain drivetrain, Kinematics kinematics, AutoStartPositions startPosition) {

        m_drivetrain = drivetrain;
        m_kinematics = kinematics;
        m_startPosition = startPosition;
        m_targetPathIndex = 0;
        m_stateIndex = 0;
        
        addRequirements(m_drivetrain);

        //Initialize the timer
        m_timer = new Timer();
        m_timer.reset();
        m_timer.stop();
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        switch (m_startPosition) {
            case LEFT:
                m_targetPath.add(new TargetPosition2D(0, 0, Math.toRadians(90), 1.0d));
                m_targetPath.add(new TargetPosition2D(0, 5, Math.toRadians(0), 0.0d));

                m_stateList.add(AutoStates.DRIVE_TO_TARGET);
                break;
            case MIDDLE:
                break;
            case RIGHT:
                break;
            default:
                break;
        }
        
        TargetPosition2D startingPose;
        SmartDashboard.putBoolean("AutoDone", false);

        //Initialize smooth control
        m_smoothControl = new SmoothControl();
        m_smoothControl.reset();

        //Grab the first pose and set that as our starting pose
        try {
            m_targetPathIndex = 0;
            startingPose = (m_targetPath.get(m_targetPathIndex));
            System.out.println("Starting pose is:" + startingPose.getX() + ", "+ startingPose.getY() + ", "+ startingPose.getHeadingDegrees());
            m_drivetrain.initAutonomous(startingPose);
            m_targetPathIndex++;
            m_targetPose = m_targetPath.get(m_targetPathIndex);
            
            // Adding end state to end of list to make sure we always have something in the list
            m_stateList.add(AutoStates.END); 
        } 
        catch (Exception e) {
            System.out.println("AutonomousCommand ERROR: target path does not contain 2 or more points!");
            m_isDone = true;
        }
        m_state = m_stateList.get(m_stateIndex);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double vR = 0.0;
        double vL = 0.0;

        switch(m_state) {
            case DRIVE_TO_TARGET:
                //Start auto nav drive routine
                //Compute turn rate and update range
                m_smoothControl.computeTurnRate(m_kinematics.getPose(), m_targetPose, m_drivetrain.getRobotVelocity());
                    
                try {
                    //Calculate vR in feet per second
                    vR = m_targetPath.get(m_targetPathIndex-1).getVelocity() - (TRACK_WIDTH_FEET/2)*m_smoothControl.getTurnRateRadians();
                    //Calculate vL in feet per second
                    vL = m_targetPath.get(m_targetPathIndex-1).getVelocity() + (TRACK_WIDTH_FEET/2)*m_smoothControl.getTurnRateRadians();
                } 
                catch (Exception e) {
                    System.out.println("AutonomousCommand ERROR: Failed to retrieve pose velocity " + (m_targetPathIndex - 1));
                    m_isDone = true;
                }
                
                SmartDashboard.putNumber("Desired Left Velocity (ft/s)", vL);
                SmartDashboard.putNumber("Desired Right Velocity (ft/s)", vR);
                SmartDashboard.putNumber("Auto Range", m_smoothControl.getRange());
                SmartDashboard.putNumber("Auto Omega Desired (Degrees)", m_smoothControl.getTurnRateDegrees());
                SmartDashboard.putString("Next Target", m_targetPose.getX() + ", "+ m_targetPose.getY() + ", "+ m_targetPose.getHeadingDegrees());

                //Converting ft/s equation output to controller velocity
                vR = SPIKE293Utils.feetPerSecToControllerVelocity(vR);
                vL = SPIKE293Utils.feetPerSecToControllerVelocity(vL);

                //Send vR and vL to velocity drive, units are in controller velocity
                m_drivetrain.velocityDrive(vL, vR);

                //Have we reached the target?
                if(TARGET_WITHIN_RANGE_FEET >= m_smoothControl.getRange()) {
                    //Get next target pose
                    m_targetPathIndex++;

                    if(m_targetPathIndex >= m_targetPath.size()) {
                        //No more poses to move to
                        System.out.println("Autonav done.");
                        SmartDashboard.putBoolean("AutoDone", true);
                        m_drivetrain.stop();        //Stop all motors  
                        setNextState();
                    }
                    else {
                        m_targetPose = m_targetPath.get(m_targetPathIndex);
                        System.out.println("Moving to next target." + m_targetPose.getX() + ", "+ m_targetPose.getY() + ", "+ m_targetPose.getHeadingDegrees());
                    }
                }
                break;
            default:
                //No valid state was set
                System.out.println("AUTONOMOUS COMMAND ERROR: STATE WAS SET TO NOTHING");
                break;

        }
    }

    // Handles whether or not enough time has elapsed
    // Requires that the timer has been reset the first time this is called
    // Will not work properly if the timer is manipulated outside of this function!
    private boolean hasTimeElapsed(Timer timer, double secondsToWait) {
        boolean isDone = false;

        timer.start(); //No-op if this timer is already running
        if(secondsToWait <= m_timer.get()) {
            timer.stop();
            timer.reset();
            isDone = true;
        }

        return isDone;
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
    
    public Position2D getStartingPose() {
        return m_targetPath.get(0);
    }

    //Returns the next state in the list of m_stateList
    public void setNextState() { 
        m_stateIndex++; 
        m_state = m_stateList.get(m_stateIndex);
    }
}
